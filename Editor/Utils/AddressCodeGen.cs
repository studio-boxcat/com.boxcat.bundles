#nullable enable
using System.Collections.Generic;
using System.Linq;

namespace Bundles.Editor
{
    internal static class AddressCodeGen
    {
        public static void GenerateCode(AssetCatalog catalog, string targetGUID)
        {
            var groups = new List<(string Name, AssetBundleId BundleId, string BundleStr)>();
            var entries = new List<(string Name, Address Value, string Comment)>();

            foreach (var g in catalog.Groups)
            {
                var groupName = g.Key.Value;
                var bundleId = g.BundleId.Name();
                groups.Add((groupName, g.BundleId, bundleId));

                // skip entries that do not have address access
                if (g.BundleId.AddressAccess() is false) continue;

                foreach (var e in g.Entries.Where(e => e.Address.NotEmpty()))
                {
                    var addressName = e.Address;
                    var address = AddressUtils.Hash(addressName);
                    entries.Add((addressName, address, $"0x{address.Hex()}, guid={e.GUID.Value}, group={groupName}, bundleId={bundleId}"));
                }
            }
            entries.Sort((a, b) => a.Name.CompareToOrdinal(b.Name));

            var b = new CodeBuilder();
            b.Comment("ReSharper disable All");
            b.Comment("This file is auto-generated by the AddressCodeGen.");
            b.Blank();

            using (b.Enum("AssetBundleId", "ushort"))
            {
                b.EnumValue("MonoScript", "0", comment: "reserved for MonoScript.");
                using var _ = b.IfDef("DEBUG");
                foreach (var (name, bundleId, bundleStr) in groups)
                {
                    var normalizedName = NormalizeName(name);
                    b.EnumValue(normalizedName, ((ushort) bundleId).ToString(), comment: bundleStr);
                }
            }
            b.Blank();

            using (b.Enum("Address", "uint"))
            {
                foreach (var (name, value, comment) in entries)
                    b.EnumValue(name, $"{(uint) value}u", comment: comment);
            }

            b.OverwriteFileWithGUID(targetGUID);
            return;

            static string NormalizeName(string name)
            {
                var sb = SbPool.Rent();
                var dirty = false;

                if (name[0].IsDigitQuick())
                {
                    sb.Append('_'); // ensure it does not start with a digit
                    dirty = true;
                }

                foreach (var c in name)
                {
                    var invalid = c.IsWhiteSpaceQuick()
                                  || c is '#' or '-'
                                  || char.IsPunctuation(c);
                    sb.Append(invalid ? '_' : c);
                    dirty |= invalid;
                }

                if (dirty)
                {
                    return SbPool.Return(sb);
                }
                else
                {
                    SbPool.ReturnVoid(sb);
                    return name;
                }
            }
        }
    }
}