#nullable enable
using System.Collections.Generic;
using System.Linq;

namespace Bundles.Editor
{
    internal static class AddressCodeGen
    {
        public static void GenerateCode(AssetCatalog catalog, string targetGUID)
        {
            var b = new CodeBuilder();
            b.Comment("This file is auto-generated by the AddressCodeGen.");
            b.Comment("ReSharper disable InconsistentNaming");
            b.Comment("ReSharper disable IdentifierTypo");
            b.Comment("ReSharper disable CommentTypo");
            b.Blank();

            using (b.Enum("AssetBundleId", "ushort"))
            {
                b.EnumValue("MonoScript", "0", comment: "reserved for MonoScript.");
                using var _ = b.IfDef("DEBUG");
                foreach (var g in catalog.Groups)
                {
                    var groupName = g.Key.Value;
                    var bundleId = g.BundleId;
                    var bundleIdStr = bundleId.Name();
                    b.EnumValue(NormalizeName(groupName), ((ushort) bundleId).ToString(), comment: $"0x{bundleIdStr}, group=\"{groupName}\"");
                }
            }
            b.Blank();

            using (b.Enum("Address", "uint"))
            {
                foreach (var g in catalog.Groups.Where(g => g.BundleId.AddressAccess()))
                {
                    var groupName = g.Key.Value;
                    var bundleId = g.BundleId.Name();

                    b.Comment($"Group: {groupName}, BundleId: 0x{bundleId}");
                    foreach (var e in g.Entries.Where(e => e.Address.NotEmpty()))
                    {
                        var addressName = e.Address;
                        var address = AddressUtils.Hash(addressName);
                        var comment = $"0x{address.Hex()}, guid={e.GUID.Value}, group={groupName}, bundleId={bundleId}";
                        b.EnumValue(addressName, $"{(uint) address}u", comment: comment);
                    }
                    b.Blank();
                    b.Blank();
                }
            }

            b.OverwriteFileWithGUID(targetGUID);
            return;

            static string NormalizeName(string name)
            {
                var sb = SbPool.Rent();
                var dirty = false;

                if (name[0].IsDigitQuick())
                {
                    sb.Append('_'); // ensure it does not start with a digit
                    dirty = true;
                }

                foreach (var c in name)
                {
                    var invalid = c.IsWhiteSpaceQuick()
                                  || c is '#' or '-'
                                  || char.IsPunctuation(c);
                    sb.Append(invalid ? '_' : c);
                    dirty |= invalid;
                }

                if (dirty)
                {
                    return SbPool.Return(sb);
                }
                else
                {
                    SbPool.ReturnVoid(sb);
                    return name;
                }
            }
        }
    }
}